registration.component.html
=====================
<div class="container">
<p>Redistration form</p>


<form [formGroup]="registrationForm" autocomplete="off" (submit)="onSubmit()">
    <div class="form-group">
        <label class="col-sm-2">UserName</label>
        <div class="col-sm-10">
        <input class="form-control" type="text" formControlName="userName">
        <span class="text-danger" *ngIf="registrationForm.get('userName').touched && registrationForm.get('userName').errors?.required">This field is mandatory</span>
    </div>
    </div>

    

    <div class="form-group">
        <label class="col-sm-2">Email</label>
        <div class="col-sm-10">
        <input class="form-control" type="email"  formControlName="Email">
        <!-- <span class="text-danger" *ngIf="registrationForm.get('Email').touched && registrationForm.get('Email').errors?.email">Invalid Email address</span> -->
        <label class="text-danger" *ngIf="registrationForm.get('Email').touched && registrationForm.get('Email').errors?.email">Invalid email address.</label>

      </div>
    </div>

    <div class="form-group">
        <label class="col-sm-2">Mobile Number</label>
        <div class="col-sm-10">
        <input class="form-control" type="number" formControlName="mobile">
    </div>
    </div>

    <div formGroupName="passwords">

      <div class="form-group">
        <label class="col-sm-2">Password</label>
        <div class="col-sm-10">
        <input class="form-control" type="password" formControlName="password">
        <span class="text-danger" *ngIf="registrationForm.get('passwords.password').touched && registrationForm.get('passwords.password').errors?.required">This field is mandatory</span>
        <span class="text-danger" *ngIf="registrationForm.get('passwords.password').touched && registrationForm.get('passwords.password').errors?.minlength">Minimum 4 Characters</span>
    </div>
    </div>

    <div class="form-group">
      <label class="col-sm-2"> Confirm Password</label>
      <div class="col-sm-10">
      <input class="form-control" type="password" formControlName="confirmPassword">
      <span class="text-danger" *ngIf="registrationForm.get('passwords.confirmPassword').touched && registrationForm.get('passwords.confirmPassword').errors?.required">This field is mandatory</span>
      <!-- <span class="text-danger" *ngIf="registrationForm.get('passwords.confirmPassword').touched && registrationForm.get('passwords.confirmPassword').errors?.passwordMismatch">Confirm Password does not match.</span> -->
      <span class="text-danger" *ngIf="registrationForm.get('passwords.confirmPassword').touched && registrationForm.get('passwords.confirmPassword').errors?.confirmPasswordMatch">Confirm Password does not match.</span>
  </div>
  </div>
  
    </div>
    <button class="btn btn-primary" type="submit" [disabled]="!registrationForm.valid">Submit</button>
</form>

<!-- <div class="jumbotron">{{registrationForm.value | json}}--{{registrationForm.status | json}}</div> -->
</div>


registration.component.ts
=====================

import { Component, OnInit } from '@angular/core';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
// import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent implements OnInit {


  formUrl:string='http://localhost:3000/registration';

  constructor(private fb:FormBuilder,private http:HttpClient) { }
  // , private toastr:ToastrService
  
  registrationForm= this.fb.group({
    userName:['',Validators.required],
    Email:[''],
    mobile:[''],
    passwords:this.fb.group({
      password:['',[Validators.required,Validators.minLength(4)]],
      confirmPassword:['',Validators.required]
    // }, { validator: this.comparePasswords })
  }, { validator: this.confirmPassMatch('password','confirmPassword') })

  });

  confirmPassMatch(pwd:string,cpwd:string){
      return (fG:FormGroup)=>{
          const control = fG.controls[pwd];
          const matchingControl = fG.controls[cpwd];
          if(control.value !== matchingControl.value){
              matchingControl.setErrors({confirmPasswordMatch:true});
          } else {
              matchingControl.setErrors(null);
          }
      }
  }

  // comparePasswords(fb: FormGroup) {
  //   let confirmPswrdCtrl = fb.get('confirmPassword');
  //   //passwordMismatch
  //   //confirmPswrdCtrl.errors={passwordMismatch:true}
  //   if (confirmPswrdCtrl.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors) {
  //     if (fb.get('password').value != confirmPswrdCtrl.value)
  //       confirmPswrdCtrl.setErrors({ passwordMismatch: true });
  //     else
  //       confirmPswrdCtrl.setErrors(null);
  //   }
  // }


  onSubmit(){
      this.http.post(this.formUrl,this.registrationForm.value).subscribe(
        () => {

          alert('data added successfully')
      //     if (res.succeeded) {
      //       this.registrationForm.reset();
      //       this.toastr.success('New user created!', 'Registration successful.');
      //     } else {
      //       res.errors.forEach(element => {
      //         switch (element.code) {
      //           case 'DuplicateUserName':
      //             this.toastr.error('Username is already taken','Registration failed.');
      //             break;
  
      //           default:
      //           this.toastr.error(element.description,'Registration failed.');
      //             break;
      //         }
      //       });
      //     }
      //   },
      //   err => {
      //     console.log(err);
         }
     
       )
  }


  ngOnInit() {
  }

}
